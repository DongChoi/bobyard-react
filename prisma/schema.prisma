// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema



// TIP: helpful commands after changes in schema.prisma 
  // $ npx prisma update
  // $ npx prisma generate
  // $ npx prisma migrate dev
  // $ npx prisma migrate 
  //MAKE SURE TO DB PUSH BEFORE DEPLOYING TO VERCEL
  // if you are in dev and do not care about permanent db changes you can use
    // $ npx prisma db push
    // This will update the schema of the tables in the db you are connected to
    // but may delete every row


//shadowDatabaseUrl will be your local machine's db_url as some db services like planet scale will not grant you permissions to make one
//relationMode: planetscale will not manage relations for you so you need to write this out for prisma to manage it for you in planetscale

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
  shadowDatabaseUrl = "mysql://root@localhost:3306/productiver"
}

generator client {
  provider = "prisma-client-js"
}


model User {
  id                  Int       @id @unique @default(autoincrement())
  name                String    @db.VarChar(255)
  providerAccountId   String    @unique @db.VarChar(255)
  profilePicture      String    @default("https://i.stack.imgur.com/34AD2.jpg")
  tasks               Task[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt @default(now())
}

model Task {
  id              Int       @unique @id @default(autoincrement())
  title           String
  description     String    @db.MediumText
  user            User      @relation(fields:[userId], references:[id])
  userId          Int    
  created_at      DateTime  @default(now())
  due_date        DateTime  
  updatedAt       DateTime  @updatedAt @default(now())
  finished_date   DateTime?  
  @@index([userId])
}


// model Task_Group {
//   id            Int       @unique   @id @default(autoincrement())
//   authorId      String?      
//   author        User?     @relation(fields:[authorId], references:[handle])
//   content       String?
//   parentId      Int?
//   parentComment Comment?  @relation("ParentChildComment",fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
//   comments      Comment[] @relation("ParentChildComment")
//   likes         User[]    @relation("LikedComment")
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt @default(now())
//   category      Category? @default(general)
//   projectId     Int?
//   project       Project?  @relation(fields:[projectId], references:[id])
// }

